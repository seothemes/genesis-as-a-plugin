<?php
/**
 * Genesis Framework.
 *
 * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package StudioPress\Genesis
 * @author  StudioPress
 * @license GPL-2.0-or-later
 * @link    https://my.studiopress.com/themes/genesis/
 */

namespace StudioPress\Genesis\Tests\Unit;

use Brain\Monkey\Functions;
use StudioPress\Genesis\Functions\Schema;

/**
 * Test schema functions.
 *
 * @group schema
 */
class Schemas extends TestCase {

	/**
	 * Override of parent::setUp().
	 *
	 * Include /lib/functions/schema.php for testing.
	 */
	public function setUp() {
		parent::setUp();

		include_once GENESIS_THEME_DIR . '/lib/functions/schema.php';
	}

	/**
	 * Test `Schema\head`.
	 *
	 * @test
	 */
	public function head_will_append_microdata_attrbutes() {
		Functions\expect( 'is_front_page' )
			->once()
			->andReturn( true );

		$attributes = Schema\head( [] );

		$this->assertEquals( true, $attributes['itemscope'] );
		$this->assertEquals( 'https://schema.org/WebSite', $attributes['itemtype'] );
	}

	/**
	 * Test `Schema\head`.
	 *
	 * @test
	 */
	public function head_will_not_append_microdata_attrbutes_if_not_front_page() {
		Functions\expect( 'is_front_page' )
			->once()
			->andReturn( false );

		$this->assertEmpty( Schema\head( [] ) );
	}

	/**
	 * Test `Schema\body`.
	 *
	 * @test
	 */
	public function body_will_append_microdata_attrbutes() {
		Functions\expect( 'is_search' )
			->once()
			->andReturn( false );

		$attributes = Schema\body( [] );

		$this->assertEquals( true, $attributes['itemscope'] );
		$this->assertEquals( 'https://schema.org/WebPage', $attributes['itemtype'] );
	}

	/**
	 * Test `Schema\body`.
	 *
	 * @test
	 */
	public function body_will_append_microdata_attrbute_itemtype_as_SearchResultsPage_if_is_search() {
		Functions\expect( 'is_search' )
			->once()
			->andReturn( true );

		$attributes = Schema\body( [] );

		$this->assertEquals( 'https://schema.org/SearchResultsPage', $attributes['itemtype'] );
	}

	/**
	 * Test `Schema\site_header`.
	 *
	 * @test
	 */
	public function site_header_will_append_microdata_attrbutes() {
		$attributes = Schema\site_header( [] );

		$this->assertEquals( true, $attributes['itemscope'] );
		$this->assertEquals( 'https://schema.org/WPHeader', $attributes['itemtype'] );
	}

	/**
	 * Test `Schema\site_title`.
	 *
	 * @test
	 */
	public function site_title_will_append_microdata_attrbutes() {
		$attributes = Schema\site_title( [] );

		$this->assertEquals( 'headline', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\site_description`.
	 *
	 * @test
	 */
	public function site_description_will_append_microdata_attrbutes() {
		$attributes = Schema\site_description( [] );

		$this->assertEquals( 'description', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\breadcrumb_link_wrap`.
	 *
	 * @test
	 */
	public function breadcrumb_link_wrap_will_append_microdata_attrbutes() {
		$attributes = Schema\breadcrumb_link_wrap( [] );

		$this->assertEquals( 'itemListElement', $attributes['itemprop'] );
		$this->assertEquals( true, $attributes['itemscope'] );
		$this->assertEquals( 'https://schema.org/ListItem', $attributes['itemtype'] );
	}

	/**
	 * Test `Schema\breadcrumb_link_wrap_meta`.
	 *
	 * @test
	 */
	public function breadcrumb_link_wrap_meta_will_append_microdata_attrbutes() {
		$attributes = Schema\breadcrumb_link_wrap_meta( [] );

		$this->assertEquals( 'position', $attributes['itemprop'] );
		$this->assertEquals( 1, $attributes['content'] );
	}

	/**
	 * Test `Schema\breadcrumb_link`.
	 *
	 * @test
	 */
	public function breadcrumb_link_will_append_microdata_attrbutes() {
		$attributes = Schema\breadcrumb_link( [], '', [] );

		$this->assertEquals( 'item', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\breadcrumb_link_text_wrap`.
	 *
	 * @test
	 */
	public function breadcrumb_link_text_wrap_will_append_microdata_attrbutes() {
		$attributes = Schema\breadcrumb_link_text_wrap( [] );

		$this->assertEquals( 'name', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\search_form`.
	 *
	 * @test
	 */
	public function search_form_will_append_microdata_attrbutes() {
		$attributes = Schema\search_form( [] );

		$this->assertEquals( 'potentialAction', $attributes['itemprop'] );
		$this->assertEquals( true, $attributes['itemscope'] );
		$this->assertEquals( 'https://schema.org/SearchAction', $attributes['itemtype'] );
	}

	/**
	 * Test `Schema\search_form_meta`.
	 *
	 * @test
	 */
	public function search_form_meta_will_append_microdata_attrbutes() {
		$attributes = Schema\search_form_meta( [] );

		$this->assertEquals( 'target', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\search_form_input`.
	 *
	 * @test
	 */
	public function search_form_input_will_append_microdata_attrbutes() {
		$attributes = Schema\search_form_input( [], '', [] );

		$this->assertEquals( 'query-input', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\nav_primary`.
	 *
	 * @test
	 */
	public function nav_primary_will_append_microdata_attrbutes() {
		$attributes = Schema\nav_primary( [] );

		$this->assertEquals( 'https://schema.org/SiteNavigationElement', $attributes['itemtype'] );
		$this->assertEquals( true, $attributes['itemscope'] );
	}

	/**
	 * Test `Schema\nav_secondary`.
	 *
	 * @test
	 */
	public function nav_secondary_will_append_microdata_attrbutes() {
		$attributes = Schema\nav_secondary( [] );

		$this->assertEquals( 'https://schema.org/SiteNavigationElement', $attributes['itemtype'] );
		$this->assertEquals( true, $attributes['itemscope'] );
	}

	/**
	 * Test `Schema\nav_header`.
	 *
	 * @test
	 */
	public function nav_header_will_append_microdata_attrbutes() {
		$attributes = Schema\nav_header( [] );

		$this->assertEquals( 'https://schema.org/SiteNavigationElement', $attributes['itemtype'] );
		$this->assertEquals( true, $attributes['itemscope'] );
	}

	/**
	 * Test `Schema\nav_link_wrap`.
	 *
	 * @test
	 */
	public function nav_link_wrap_will_append_microdata_attrbutes() {
		$attributes = Schema\nav_link_wrap( [] );

		$this->assertEquals( 'name', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\nav_link`.
	 *
	 * @test
	 */
	public function nav_link_will_append_microdata_attrbutes() {
		$attributes = Schema\nav_link( [] );

		$this->assertEquals( 'url', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\entry`.
	 *
	 * @test
	 */
	public function entry_will_append_microdata_attrbutes() {
		Functions\expect( 'is_main_query' )
			->once()
			->andReturn( true );

		$attributes = Schema\entry( [] );

		$this->assertEquals( true, $attributes['itemscope'] );
		$this->assertEquals( 'https://schema.org/CreativeWork', $attributes['itemtype'] );
	}

	/**
	 * Test `Schema\entry`.
	 *
	 * @test
	 */
	public function entry_will_return_an_empty_array_if_is_main_query_and_genesis_is_blog_template_are_false() {
		Functions\expect( 'is_main_query' )
			->once()
			->andReturn( false );

		Functions\expect( 'genesis_is_blog_template' )
			->once()
			->andReturn( false );

		$this->assertEquals( [], Schema\entry( [] ) );
	}

	/**
	 * Test `Schema\entry_image`.
	 *
	 * @test
	 */
	public function entry_image_will_append_microdata_attrbutes() {
		$attributes = Schema\entry_image( [] );

		$this->assertEquals( 'image', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\entry_image_widget`.
	 *
	 * @test
	 */
	public function entry_image_widget_will_append_microdata_attrbutes() {
		$attributes = Schema\entry_image_widget( [] );

		$this->assertEquals( 'image', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\entry_image_grid_loop`.
	 *
	 * @test
	 */
	public function entry_image_grid_loop_will_append_microdata_attrbutes() {
		$attributes = Schema\entry_image_grid_loop( [] );

		$this->assertEquals( 'image', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\entry_author`.
	 *
	 * @test
	 */
	public function entry_author_will_append_microdata_attrbutes() {
		$attributes = Schema\entry_author( [] );

		$this->assertEquals( 'author', $attributes['itemprop'] );
		$this->assertEquals( true, $attributes['itemscope'] );
		$this->assertEquals( 'https://schema.org/Person', $attributes['itemtype'] );
	}

	/**
	 * Test `Schema\entry_author_link`.
	 *
	 * @test
	 */
	public function entry_author_link_will_append_microdata_attrbutes() {
		$attributes = Schema\entry_author_link( [] );

		$this->assertEquals( 'url', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\entry_author_name`.
	 *
	 * @test
	 */
	public function entry_author_name_will_append_microdata_attrbutes() {
		$attributes = Schema\entry_author_name( [] );

		$this->assertEquals( 'name', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\entry_time`.
	 *
	 * @test
	 */
	public function entry_time_will_append_microdata_attrbutes() {
		$time = '2019-05-31T17:10:53+00:00';

		Functions\expect( 'get_the_time' )
			->once()
			->with( 'c' )
			->andReturn( $time );

		$attributes = Schema\entry_time( [] );

		$this->assertEquals( 'datePublished', $attributes['itemprop'] );
		$this->assertEquals( $time, $attributes['datetime'] );
	}

	/**
	 * Test `Schema\entry_modified_time`.
	 *
	 * @test
	 */
	public function entry_modified_time_will_append_microdata_attrbutes() {
		$time = '2019-05-31T17:09:21+00:00';

		Functions\expect( 'get_the_modified_time' )
			->once()
			->with( 'c' )
			->andReturn( $time );

		$attributes = Schema\entry_modified_time( [] );

		$this->assertEquals( 'dateModified', $attributes['itemprop'] );
		$this->assertEquals( $time, $attributes['datetime'] );
	}

	/**
	 * Test `Schema\entry_title`.
	 *
	 * @test
	 */
	public function entry_title_will_append_microdata_attrbutes() {
		$attributes = Schema\entry_title( [] );

		$this->assertEquals( 'headline', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\entry_content`.
	 *
	 * @test
	 */
	public function entry_content_will_append_microdata_attrbutes() {
		Functions\expect( 'is_main_query' )
			->once()
			->andReturn( true );

		$attributes = Schema\entry_content( [] );

		$this->assertEquals( 'text', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\entry_content`.
	 *
	 * @test
	 */
	public function entry_content_will_return_empty_array_if_is_main_query_and_genesis_is_blog_template_return_false() {
		Functions\expect( 'is_main_query' )
			->once()
			->andReturn( false );

		Functions\expect( 'genesis_is_blog_template' )
			->once()
			->andReturn( false );

		$this->assertEquals( [], Schema\entry_content( [] ) );
	}

	/**
	 * Test `Schema\comment`.
	 *
	 * @test
	 */
	public function comment_will_append_microdata_attrbutes() {
		$attributes = Schema\comment( [] );

		$this->assertEquals( 'comment', $attributes['itemprop'] );
		$this->assertEquals( true, $attributes['itemscope'] );
		$this->assertEquals( 'https://schema.org/Comment', $attributes['itemtype'] );
	}

	/**
	 * Test `Schema\comment_author`.
	 *
	 * @test
	 */
	public function comment_author_will_append_microdata_attrbutes() {
		$attributes = Schema\comment_author( [] );

		$this->assertEquals( 'author', $attributes['itemprop'] );
		$this->assertEquals( true, $attributes['itemscope'] );
		$this->assertEquals( 'https://schema.org/Person', $attributes['itemtype'] );
	}

	/**
	 * Test `Schema\comment_author_link`.
	 *
	 * @test
	 */
	public function comment_author_link_will_append_microdata_attrbutes() {
		$attributes = Schema\comment_author_link( [] );

		$this->assertEquals( 'url', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\comment_author_name`.
	 *
	 * @test
	 */
	public function comment_author_name_will_append_microdata_attrbutes() {
		$attributes = Schema\comment_author_name( [] );

		$this->assertEquals( 'name', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\comment_time`.
	 *
	 * @test
	 */
	public function comment_time_will_append_microdata_attrbutes() {
		$time = '2019-05-31T17:09:21+00:00';

		Functions\expect( 'get_comment_time' )
			->once()
			->with( 'c' )
			->andReturn( $time );

		$attributes = Schema\comment_time( [] );

		$this->assertEquals( 'datePublished', $attributes['itemprop'] );
		$this->assertEquals( $time, $attributes['datetime'] );
	}

	/**
	 * Test `Schema\comment_time_link`.
	 *
	 * @test
	 */
	public function comment_time_link_will_append_microdata_attrbutes() {
		$attributes = Schema\comment_time_link( [], '', [] );

		$this->assertEquals( 'url', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\comment_content`.
	 *
	 * @test
	 */
	public function comment_content_will_append_microdata_attrbutes() {
		$attributes = Schema\comment_content( [] );

		$this->assertEquals( 'text', $attributes['itemprop'] );
	}

	/**
	 * Test `Schema\author_box`.
	 *
	 * @test
	 */
	public function author_box_will_append_microdata_attrbutes() {
		$attributes = Schema\author_box( [] );

		$this->assertEquals( 'author', $attributes['itemprop'] );
		$this->assertEquals( true, $attributes['itemscope'] );
		$this->assertEquals( 'https://schema.org/Person', $attributes['itemtype'] );
	}

	/**
	 * Test `Schema\sidebar_primary`.
	 *
	 * @test
	 */
	public function sidebar_primary_will_append_microdata_attrbutes() {
		$attributes = Schema\sidebar_primary( [] );

		$this->assertEquals( true, $attributes['itemscope'] );
		$this->assertEquals( 'https://schema.org/WPSideBar', $attributes['itemtype'] );
	}

	/**
	 * Test `Schema\sidebar_secondary`.
	 *
	 * @test
	 */
	public function sidebar_secondary_will_append_microdata_attrbutes() {
		$attributes = Schema\sidebar_secondary( [] );

		$this->assertEquals( true, $attributes['itemscope'] );
		$this->assertEquals( 'https://schema.org/WPSideBar', $attributes['itemtype'] );
	}

	/**
	 * Test `Schema\site_footer`.
	 *
	 * @test
	 */
	public function site_footer_will_append_microdata_attrbutes() {
		$attributes = Schema\site_footer( [] );

		$this->assertEquals( true, $attributes['itemscope'] );
		$this->assertEquals( 'https://schema.org/WPFooter', $attributes['itemtype'] );
	}
}
