<?php
/**
 * Genesis Framework.
 *
 * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package Genesis\Tests
 * @author  StudioPress
 * @license GPL-2.0-or-later
 * @link    https://my.studiopress.com/themes/genesis/
 */

namespace StudioPress\Genesis\Tests\Unit;

use Brain\Monkey\Filters;
use Brain\Monkey\Functions;
use Mockery;

require_once PARENT_DIR . '/lib/admin/customizer.php';

/**
 * Test Genesis Customizer functions.
 *
 * @group admin
 * @group customizer
 */
class Genesis_Customizer_Test extends TestCase {

	/**
	 * Test genesis_customer_theme_settings() applies the genesis_customizer_theme_settings_config filter.
	 */
	public function test_genesis_customizer_theme_settings_applies_genesis_customizer_theme_settings_config_filter() {
		$mocked_genesis_customizer = Mockery::mock( 'Genesis_Customizer' );
		$mocked_genesis_customizer->shouldReceive( 'register' );

		Functions\when( 'get_stylesheet_directory' )->justReturn( GENESIS_THEME_DIR . '/tests/fixtures/test-configs/child' );

		Functions\stubs(
			[
				'__',
				'esc_html',
				'current_theme_supports'       => 'true',
				'get_theme_support'            => 'genesis-style-selector',
				'get_intermediate_image_sizes' => [ 1, 2 ],
				'absint',
				'get_option',
				'wp_parse_args',
			]
		);

		Filters\expectApplied( 'genesis_customizer_theme_settings_config' )
			->once()
			->with( Mockery::type( 'array' ) );

		genesis_customizer_theme_settings( $mocked_genesis_customizer );
	}

	/**
	 * Test genesis_customer_seo_settings() applies the genesis_customizer_seo_settings_config filter.
	 */
	public function test_genesis_customizer_seo_settings_applies_genesis_customizer_seo_settings_config_filter() {
		$mocked_genesis_customizer = Mockery::mock( 'Genesis_Customizer' );
		$mocked_genesis_customizer->shouldReceive( 'register' );

		Functions\when( 'get_template_directory' )->justReturn( GENESIS_THEME_DIR . '/tests/fixtures/test-configs/parent' );
		Functions\when( 'get_stylesheet_directory' )->justReturn( GENESIS_THEME_DIR . '/tests/fixtures/test-configs/child' );

		Functions\stubs(
			[
				'__',
				'esc_html',
				'current_theme_supports'       => 'true',
				'get_theme_support'            => 'genesis-style-selector',
				'get_intermediate_image_sizes' => [ 1, 2 ],
				'absint',
				'get_option',
				'wp_parse_args',
			]
		);

		Filters\expectApplied( 'genesis_customizer_seo_settings_config' )
			->once()
			->with( Mockery::type( 'array' ) );

		genesis_customizer_seo_settings( $mocked_genesis_customizer );
	}

	/**
	 * Test genesis_get_color_schemes_for_customizer() calls genesis_has_color_schemes and returns an empty array when no theme support for genesis-style-selector is added.
	 */
	public function test_genesis_get_color_schemes_for_customizer_returns_empty_array_when_no_theme_support() {
		Functions\expect( 'genesis_has_color_schemes' )->once();

		self::assertEmpty( genesis_get_color_schemes_for_customizer() );
	}

	/**
	 * Test genesis_has_color_schemes() calls current_theme_supports and returns false when no theme support for genesis-style-selector is added.
	 */
	public function test_genesis_has_color_schemes_calls_current_theme_supports_and_returns_false_when_no_theme_support_for_genesis_style_selector() {
		Functions\expect( 'current_theme_supports' )->once();

		self::assertFalse( genesis_has_color_schemes() );
	}

	/**
	 * Test genesis_has_color_schemes() returns false when no styles are added.
	 */
	public function test_genesis_has_color_schemes_returns_false_when_no_styles_are_added() {
		Functions\when( 'current_theme_supports' )->justReturn( 'true' );
		Functions\when( 'get_theme_support' )->justReturn( '' );

		self::assertFalse( genesis_has_color_schemes() );
	}

	/**
	 * Test genesis_show_header_customizer_callback() calls current_theme_supports three times and returns true when neither custom header theme supports are added.
	 */
	public function test_genesis_show_header_customizer_callback_calls_current_theme_supports_three_times_and_returns_true_when_neither_custom_header_theme_supports_are_added() {
		Functions\expect( 'current_theme_supports' )->times( 3 );

		self::assertTrue( genesis_show_header_customizer_callback() );
	}

	/**
	 * Test genesis_show_header_customizer_callback() returns false when a theme support is added.
	 */
	public function test_genesis_show_header_customizer_callback_returns_false_when_a_theme_support_is_added() {
		Functions\when( 'current_theme_supports' )->justReturn( 'true' );

		self::assertFalse( genesis_show_header_customizer_callback() );
	}

	/**
	 * Test genesis_posts_show_on_front() calls get_option and returns false when show_on_front is not posts.
	 */
	public function test_genesis_posts_show_on_front_calls_get_option_and_returns_false() {
		Functions\expect( 'get_option' )->once();

		self::assertFalse( genesis_posts_show_on_front() );
	}

	/**
	 * Test genesis_posts_show_on_front() returns true when show_on_front is posts.
	 */
	public function test_genesis_posts_show_on_front_returns_true_when_show_on_front_is_posts() {
		Functions\when( 'get_option' )->justReturn( 'posts' );

		self::assertTrue( genesis_posts_show_on_front() );
	}

	/**
	 * Test genesis_page_show_on_front() calls get_option and returns false when show_on_front is not page.
	 */
	public function test_genesis_page_show_on_front_calls_get_option_and_returns_false() {
		Functions\expect( 'get_option' )->once();

		self::assertFalse( genesis_page_show_on_front() );
	}

	/**
	 * Test genesis_page_show_on_front() returns true when show_on_front is page.
	 */
	public function test_genesis_page_show_on_front_returns_true_when_show_on_front_is_page() {
		Functions\when( 'get_option' )->justReturn( 'page' );

		self::assertTrue( genesis_page_show_on_front() );
	}

}
