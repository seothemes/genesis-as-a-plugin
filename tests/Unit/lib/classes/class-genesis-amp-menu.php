<?php
/**
 * Genesis Framework.
 *
 * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package StudioPress\Genesis\Tests\Unit
 * @author  XWP, Google, StudioPress, and contributors
 * @license GPL-2.0-or-later
 * @link    https://github.com/studiopress/genesis-amp
 */

namespace StudioPress\Genesis\Tests\Unit;

use Brain\Monkey\Functions;
use Genesis_AMP_Menu;
use Genesis_Menu_Handler;

/**
 * Test Genesis AMP Menu.
 *
 * @group amp
 */
class Genesis_AMP_Menu_Test extends TestCase {
	/**
	 * Sets up the fixture, for example, open a network connection.
	 *
	 * This method is called before a test is executed.
	 */
	public function setUp() {
		Functions\stubs( [ '__' ] );
		require_once GENESIS_THEME_DIR . '/lib/classes/class-genesis-menu-handler.php';
		require_once GENESIS_THEME_DIR . '/lib/classes/class-genesis-amp-menu.php';

		parent::setUp();
	}

	/**
	 * Create an instance of the menu.
	 *
	 * @param string $theme_name    Name of the active theme.
	 * @param array  $script_config Array of script configurations parameters.
	 * @param array  $extras_config Array of extra configuration parameters.
	 *
	 * @return Genesis_AMP_Menu
	 */
	private function create_instance( $theme_name, $script_config = [], $extras_config = [] ) {
		$config = [
			'script' => $script_config,
			'extras' => $extras_config,
		];
		$config = Genesis_Menu_Handler::init_config( $config );

		return new Genesis_AMP_Menu( $theme_name, $config['script'], $config['extras'] );
	}

	/**
	 * Test responsive menu configuration property upon instantiation.
	 *
	 * Uses reflection to gain access to the protected property.
	 */
	public function test_responsive_config_property_upon_instantiation() {
		$script_config = [
			'menuClasses' => [
				'combine' => [ '.nav-primary', '.nav-off-screen' ],
				'others'  => [ '.nav-secondary' ],
			],
		];
		$menu          = $this->create_instance( 'responsive', $script_config, [] );

		$responsive_config = $this->get_reflective_property( 'responsive_config', 'Genesis_AMP_Menu' );
		self::assertSame(
			[
				'nav-primary'    => 'primary',
				'nav-off-screen' => 'off-screen',
				'nav-secondary'  => 'secondary',
			],
			$responsive_config->getValue( $menu )
		);
	}

	/**
	 * Test hamburger configuration property upon instantiation.
	 *
	 * Uses reflection to gain access to the protected property.
	 */
	public function test_hamburger_config_property_upon_instantiation() {
		$script_config = [
			'mainMenu'    => 'Off Screen Menu',
			'menuClasses' => [
				'combine' => [ '.nav-off-screen', '.nav-primary' ],
				'others'  => [ '.nav-secondary' ],
			],
		];
		$menu          = $this->create_instance( 'hamburger', $script_config, [] );

		$hamburger_config = $this->get_reflective_property( 'hamburger_config', 'Genesis_AMP_Menu' );
		self::assertSame(
			[
				'theme_location'  => 'off-screen',
				'label'           => 'Off Screen Menu',
				'icon_closed'     => 'dashicons-before dashicons-menu',
				'icon_opened'     => 'dashicons-before dashicons-no-alt',
				'filter_location' => 'off-screen_nav',
				'state_id'        => 'navOffScreenExpanded',
				'state'           => false,
			],
			$hamburger_config->getValue( $menu )
		);

		$script_config = [
			'menuClasses' => [
				'others' => [ '.nav-primary', '.nav-amp', '.nav-secondary' ],
			],
		];
		$menu          = $this->create_instance( 'hamburger', $script_config, [] );

		$hamburger_config = $this->get_reflective_property( 'hamburger_config', 'Genesis_AMP_Menu' );
		self::assertSame(
			[
				'theme_location'  => 'primary',
				'label'           => 'Menu',
				'icon_closed'     => 'dashicons-before dashicons-menu',
				'icon_opened'     => 'dashicons-before dashicons-no-alt',
				'filter_location' => 'do_nav',
				'state_id'        => 'navPrimaryExpanded',
				'state'           => false,
			],
			$hamburger_config->getValue( $menu )
		);
	}

	/**
	 * Test the hooks are added when invoking `add_hooks()` method.
	 */
	public function test_should_add_hooks() {
		$script_config = [
			'menuClasses' => [
				'combine' => [
					'.nav-primary',
					'.nav-amp',
				],
			],
		];
		$menu          = $this->create_instance( 'amp-foo', $script_config, [] );
		$menu->add_hooks();

		self::assertEquals( 20, add_action( 'wp_enqueue_scripts', [ $menu, 'add_custom_css' ] ) );
		self::assertEquals( 10, has_filter( 'genesis_attr_nav-primary', [ $menu, 'add_nav_class_attribute' ] ) );
		self::assertEquals( 10, has_filter( 'genesis_attr_nav-amp', [ $menu, 'add_nav_class_attribute' ] ) );
		self::assertEquals( 10, has_filter( 'genesis_do_nav', [ $menu, 'add_hamburger_button' ] ) );
		self::assertEquals( 10, has_filter( 'genesis_attr_nav-primary-toggle', [ $menu, 'add_hamburger_attributes' ] ) );
		self::assertEquals( 10, has_filter( 'walker_nav_menu_start_el', [ $menu, 'add_nav_submenu_toggle' ] ) );
		self::assertEquals( 10, has_filter( 'genesis_attr_sub-menu-toggle', [ $menu, 'add_submenu_toggle_attributes' ] ) );
	}

	/**
	 * Test class attribute is added.
	 */
	public function test_add_nav_class_attribute() {
		$menu = $this->create_instance( 'amp-foo', [], [] );

		$attributes = [
			'class'      => 'nav-primary',
			'aria-label' => 'Main',
		];
		self::assertSame(
			[
				'class'      => 'nav-primary genesis-responsive-menu',
				'aria-label' => 'Main',
			],
			$menu->add_nav_class_attribute( $attributes )
		);
	}

	/**
	 * Test convert to camel case.
	 *
	 * Uses reflection to gain access to the protected method.
	 */
	public function test_convert_to_camel_case() {
		$menu   = $this->create_instance( 'amp-foo', [], [] );
		$method = $this->get_reflective_method( 'convert_to_camel_case', 'Genesis_AMP_Menu' );

		// Test the configuration matches what's expected.
		self::assertSame( 'amp', $method->invoke( $menu, 'amp' ) );
		self::assertSame( 'ampFoo', $method->invoke( $menu, 'amp-foo' ) );
		self::assertSame( 'ampFooNav', $method->invoke( $menu, 'amp-foo-nav' ) );
		self::assertSame( 'ampFooNav', $method->invoke( $menu, 'amp-foo_nav' ) );
		self::assertSame( 'ampFooNav', $method->invoke( $menu, 'amp_fooNav' ) );
	}

	/**
	 * Test adding the hamburger button to the menu.
	 */
	public function test_add_hamburger_button() {
		$script_config = [
			'menuClasses' => [
				'combine' => [ '.nav-primary', '.nav-off-screen' ],
				'others'  => [],
			],
		];
		$menu          = $this->create_instance( 'hamburger', $script_config, [] );

		$nav_html         = '<nav class="nav-primary"></nav>';
		$state_output     = '<amp-state id="navPrimaryExpanded"><script type="application/json">false</script></amp-state>';
		$hamburger_output = '<button class="nav-primary-toggle">Menu</button>';
		Functions\expect( 'genesis_markup' )
			->once()
			->with(
				[
					'open'    => '<button %s>',
					'close'   => '</button>',
					'context' => 'nav-primary-toggle',
					'content' => 'Menu',
					'echo'    => false,
				]
			)
			->andReturn( $hamburger_output );
		Functions\when( 'wp_json_encode' )->alias(
			static function( $state ) {
				return json_encode( $state ); // phpcs:ignore WordPress.WP.AlternativeFunctions.json_encode_json_encode
			}
		);

		self::assertSame(
			$state_output . $hamburger_output . $nav_html,
			$menu->add_hamburger_button( $nav_html )
		);
	}

	/**
	 * Test adding the hamburger attributes to the menu.
	 */
	public function test_add_hamburger_attributes() {
		$script_config = [
			'menuIconClass' => 'some-icon',
			'menuClasses'   => [
				'combine' => [ '.nav-primary', '.nav-off-screen' ],
			],
		];
		$menu          = $this->create_instance( 'hamburger', $script_config, [] );

		self::assertSame(
			[
				'id'              => 'genesis-mobile-nav-primary',
				'class'           => 'menu-toggle some-icon',
				'aria-controls'   => 'primary-menu',
				'aria-expanded'   => 'false',
				'aria-pressed'    => 'false',
				'on'              => 'tap:AMP.setState( { navPrimaryExpanded: !navPrimaryExpanded, navPrimarySubmenuExpanded0Depth: !navPrimaryExpanded ? navPrimarySubmenuExpanded0Depth : 0 } )',
				'[class]'         => "navPrimaryExpanded ? 'menu-toggle dashicons-before dashicons-no-alt' : 'menu-toggle some-icon'",
				'[aria-expanded]' => "navPrimaryExpanded ? 'true' : 'false'",
				'[aria-pressed]'  => "navPrimaryExpanded ? 'true' : 'false'",
			],
			$menu->add_hamburger_attributes( [] )
		);
	}

	/**
	 * Test adding the attributes to submenu toggle.
	 */
	public function test_add_submenu_toggle_attributes() {
		$script_config = [
			'subMenuIconClass' => 'some-icon',
			'menuClasses'      => [
				'combine' => [ '.nav-main-menu', '.nav-secondary' ],
				'others'  => [],
			],
		];
		$menu          = $this->create_instance( 'submenu', $script_config, [] );

		self::assertSame(
			[
				'class'           => 'sub-menu-toggle some-icon',
				'aria-expanded'   => 'false',
				'aria-pressed'    => 'false',
				'on'              => 'tap:AMP.setState( { navMainMenuExpanded1Depth: navMainMenuExpanded1Depth == 0 ? 0 : 0 } )',
				'[class]'         => "navMainMenuExpanded1Depth == 0 ? 'sub-menu-toggle some-icon activated toggled-on' : 'sub-menu-toggle some-icon'",
				'[aria-expanded]' => "navMainMenuExpanded1Depth == 0 ? 'true' : 'false'",
				'[aria-pressed]'  => "navMainMenuExpanded1Depth == 0 ? 'true' : 'false'",
			],
			$menu->add_submenu_toggle_attributes(
				[],
				'sub-menu-toggle',
				[
					'state_id'       => 'navMainMenuExpanded1Depth',
					'theme_location' => 'main-menu',
					'submenu_index'  => 0,
				]
			)
		);
	}

	/**
	 * Test getting the submenu state ID.
	 */
	public function test_get_submenu_state_id() {
		$script_config = [
			'menuClasses' => [
				'combine' => [ '.nav-primary', '.nav-secondary' ],
			],
		];
		$menu          = $this->create_instance( 'hamburger', $script_config, [] );
		$depth         = 1;
		$this->assertEquals( "navPrimarySubmenuExpanded{$depth}Depth", $menu->get_submenu_state_id( $depth ) );

		$depth = 5;
		$this->assertEquals( "navPrimarySubmenuExpanded{$depth}Depth", $menu->get_submenu_state_id( $depth ) );
	}
}
