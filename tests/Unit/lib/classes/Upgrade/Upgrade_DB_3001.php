<?php
/**
 * Genesis Framework.
 *
 * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package StudioPress\Genesis
 * @author  StudioPress
 * @license GPL-2.0-or-later
 * @link    https://my.studiopress.com/themes/genesis/
 */

namespace StudioPress\Genesis\Tests\Unit;

use Brain\Monkey\Functions;
use \StudioPress\Genesis\Upgrade\Upgrade_DB_3001 as Upgrader;

/**
 * Test Upgrade_DB_3001.
 */
class Upgrade_DB_3001_Test extends TestCase {
	/**
	 * Upgrader object.
	 *
	 * @var StudioPress\Genesis\Upgrade\Upgrade_DB_Interface instance.
	 */
	private $upgrader;

	/**
	 * Holds real $wp_filesystem temporarily while we mock.
	 *
	 * @var WP_Filesystem_Base
	 */
	private $wp_filesystem;

	/**
	 * Sets up the fixture.
	 *
	 * This method is called before a test is executed.
	 */
	public function setUp() {
		global $wp_filesystem;
		$this->wp_filesystem = $wp_filesystem;

		//phpcs:ignore WordPress.WP.GlobalVariablesOverride.Prohibited -- Mocking $wp_filesystem.
		$wp_filesystem = \Mockery::mock( 'WP_Filesystem_Base' );

		Functions\when( 'get_template_directory' )->justReturn( GENESIS_THEME_DIR );
		Functions\when( 'get_stylesheet_directory' )->justReturn( '' );

		// Defaults. No template exists in child theme, posts using template exist.
		Functions\when( 'get_page_templates' )->justReturn( [] );
		Functions\when( 'get_posts' )->justReturn( [ 1, 2, 3 ] );
		Functions\when( 'genesis_get_option' )->returnArg();
		Functions\when( 'genesis_get_custom_field' )->justReturn( 'something' );
		Functions\when( 'wp_parse_args' )->justReturn(
			[
				'foo' => 'bar',
				'abc' => 'xyz',
			]
		);

		$this->upgrader = new Upgrader();
		parent::setUp();
	}

	/**
	 * Tear down after testing.
	 */
	public function tearDown() {
		global $wp_filesystem;

		//phpcs:ignore WordPress.WP.GlobalVariablesOverride.Prohibited -- Restoring original.
		$wp_filesystem = $this->wp_filesystem;
	}

	/**
	 * Test that blog pages get migrated when blog template doesn't exist in child theme, and posts exist that use the blog template.
	 */
	public function test_migrate_blog_pages() {
		$expected_content = <<<'CONTENT'
<?php
/**
 * Template Name: Blog
 */

genesis();
CONTENT;

		Functions\expect( 'file_exists' )
			->once()
			->andReturn( false );

		global $wp_filesystem;
		$wp_filesystem->shouldReceive( 'put_contents' )
			->once()
			->with(
				'/page_blog.php',
				$expected_content
			);

		Functions\expect( 'update_post_meta' )
			->once()
			->with(
				'1',
				'query_args',
				'foo=bar&abc=xyz'
			);

		Functions\expect( 'update_post_meta' )
			->once()
			->with(
				'2',
				'query_args',
				'foo=bar&abc=xyz'
			);

		Functions\expect( 'update_post_meta' )
			->once()
			->with(
				'3',
				'query_args',
				'foo=bar&abc=xyz'
			);

		$this->upgrader->migrate_blog_pages();
	}

	/**
	 * Test that blog page templates do not get migrated if no posts exist that use the template.
	 */
	public function test_migrate_blog_pages_fail_when_template_not_used() {
		Functions\when( 'get_posts' )->justReturn( [] );

		global $wp_filesystem;
		$wp_filesystem->shouldReceive( 'put_contents' )->never();

		$this->assertEquals( null, $this->upgrader->migrate_blog_pages() );
	}

	/**
	 * Test that blog page template does not get copied to child theme if template already exists in child theme.
	 */
	public function test_migrate_blog_pages_fail_when_template_exists_in_child_theme() {
		Functions\expect( 'file_exists' )
			->once()
			->andReturn( true );

		global $wp_filesystem;
		$wp_filesystem->shouldReceive( 'put_contents' )->never();
		Functions\expect( 'update_post_meta' )->times( 3 );

		$this->upgrader->migrate_blog_pages();
	}

	/**
	 * Test that archive template gets migrated when archive template doesn't exist in child theme, and posts exist that use the archive template.
	 */
	public function test_migrate_archive_pages() {
		$expected_content = <<<'CONTENT'
<?php
/**
 * Template Name: Archive
 */

remove_action( 'genesis_entry_content', 'genesis_do_post_content' );
add_action( 'genesis_entry_content', 'genesis_page_archive_content' );

function genesis_page_archive_content() {
    $heading = ( genesis_a11y( 'headings' ) ? 'h2' : 'h4' );

    genesis_sitemap( $heading );
}

genesis();
CONTENT;

		Functions\expect( 'file_exists' )
			->once()
			->andReturn( false );

		global $wp_filesystem;
		$wp_filesystem->shouldReceive( 'put_contents' )
			->once()
			->with(
				'/page_archive.php',
				$expected_content
			);

		$this->upgrader->migrate_archive_pages();
	}

	/**
	 * Test that archive templates do not get migrated if no posts exist that use the template.
	 */
	public function test_migrate_archive_pages_fail_when_template_not_used() {
		Functions\when( 'get_posts' )->justReturn( [] );

		global $wp_filesystem;
		$wp_filesystem->shouldReceive( 'put_contents' )->never();

		$this->assertEquals( null, $this->upgrader->migrate_archive_pages() );
	}

	/**
	 * Test that archove template does not get copied to child theme if template already exists in child theme.
	 */
	public function test_migrate_archive_pages_fail_when_template_exists_in_child_theme() {
		Functions\expect( 'file_exists' )
			->once()
			->andReturn( true );

		global $wp_filesystem;
		$wp_filesystem->shouldReceive( 'put_contents' )->never();

		$this->upgrader->migrate_archive_pages();
	}

	/**
	 * Test that method accurately detects the existance of a template.
	 */
	public function test_blog_template_exists() {
		$this->assertFalse( $this->upgrader->blog_template_exists() );

		Functions\when( 'get_page_templates' )->justReturn(
			[
				'Blog' => 'page_blog.php',
			]
		);

		$this->assertTrue( $this->upgrader->blog_template_exists() );
	}

	/**
	 * Test that method accurately detects the existance of a template.
	 */
	public function test_archive_template_exists() {
		$this->assertFalse( $this->upgrader->archive_template_exists() );

		Functions\when( 'get_page_templates' )->justReturn(
			[
				'Archive' => 'page_archive.php',
			]
		);

		$this->assertTrue( $this->upgrader->archive_template_exists() );
	}
}
