<?php
/**
 * Genesis Framework.
 *
 * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package StudioPress\Genesis
 * @author  StudioPress
 * @license GPL-2.0-or-later
 * @link    https://my.studiopress.com/themes/genesis/
 */

namespace StudioPress\Genesis\Tests\Unit;

use Brain\Monkey\Functions;
use Genesis_Update_Check;

/**
 * Test UpdateCheck class.
 *
 * @group contributors
 */
class Update_Check_Test extends TestCase {

	/**
	 * Config to pass to UpdateCheck.
	 *
	 * @var array
	 */
	private $update_config;

	/**
	 * Update_Check object.
	 *
	 * @var object
	 */
	private $update;

	/**
	 * Valid server response.
	 *
	 * @var array
	 */
	private $response;

	/**
	 * Sets up the fixture.
	 *
	 * This method is called before a test is executed.
	 */
	public function setUp() {

		$this->update_config = [
			'post_url'      => '',
			'post_args'     => [ 'body' => [] ],
			'req_data_keys' => [ 'theme', 'new_version', 'url', 'package', 'changelog_url' ],
		];

		$this->response = [
			'headers'  => [],
			// phpcs:ignore WordPress.PHP.DiscouragedPHPFunctions.serialize_serialize
			'body'     => serialize(
				[
					'theme'         => 'genesis',
					'new_version'   => '9.9.9',
					'url'           => 'https://my.studiopress.com/themes/genesis',
					'package'       => 'https://my.studiopress.com/themes/genesis.zip',
					'changelog_url' => 'https://my.studiopress.com/themes/genesis',
				]
			),
			'response' => [
				'code'    => '200',
				'message' => 'OK',
			],
		];

		Functions\when( 'get_template_directory' )->justReturn( GENESIS_THEME_DIR );
		Functions\when( 'maybe_unserialize' )->alias(
			static function( $value ) {
				// phpcs:ignore WordPress.PHP.DiscouragedPHPFunctions.serialize_unserialize,WordPress.PHP.NoSilencedErrors.Discouraged
				$unserialized = @unserialize( $value );
				if ( $unserialized ) {
					return $unserialized;
				}
				return $value;
			}
		);
		Functions\when( 'wp_remote_post' )->justReturn( $this->response );

		parent::setUp();
	}

	/**
	 * A valid update response result should be the unserialized array of theme data.
	 */
	public function test_updatecheck_valid_response() {
		Functions\when( 'wp_remote_retrieve_body' )->justReturn( $this->response['body'] );
		$update = new Genesis_Update_Check( $this->update_config );

		// phpcs:ignore WordPress.PHP.DiscouragedPHPFunctions.serialize_unserialize
		self::assertEquals( unserialize( $this->response['body'] ), $update->get_update() );
	}

	/**
	 * If the update server returns `error` for any reason, update result should be an empty array.
	 */
	public function test_update_check_error_response() {
		Functions\when( 'wp_remote_retrieve_body' )->justReturn( 'error' );
		$update = new Genesis_Update_Check( $this->update_config );

		self::assertEquals( [], $update->get_update() );
	}

	/**
	 * If the update server response is missing theme data, update result should be an empty array.
	 */
	public function test_update_check_missing_param_response() {
		// phpcs:ignore WordPress.PHP.DiscouragedPHPFunctions.serialize_unserialize
		$body = unserialize( $this->response['body'] );
		foreach ( $body as $key => $value ) {
			$response = $body;
			unset( $response[ $key ] );

			Functions\when( 'wp_remote_retrieve_body' )->justReturn( $response );
			$update = new Genesis_Update_Check( $this->update_config );

			self::assertEquals( [], $update->get_update() );
		}
	}
}
