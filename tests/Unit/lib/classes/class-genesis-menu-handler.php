<?php
/**
 * Genesis Framework.
 *
 * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package StudioPress\Genesis\Tests\Unit
 * @author  XWP, Google, StudioPress, and contributors
 * @license GPL-2.0-or-later
 * @link    https://github.com/studiopress/genesis-amp
 */

namespace StudioPress\Genesis\Tests\Unit;

use Brain\Monkey\Functions;
use Genesis_Menu_Handler;
use Mockery;

/**
 * Test Genesis Menu Handler.
 *
 * @group amp
 */
class Genesis_Menu_Handler_Test extends TestCase {

	/**
	 * Sets up the fixture, for example, open a network connection.
	 *
	 * This method is called before a test is executed.
	 */
	public function setUp() {
		Functions\stubs( [ '__' ] );
		require_once GENESIS_THEME_DIR . '/lib/classes/class-genesis-menu-handler.php';

		parent::setUp();
	}

	/**
	 * Test configuration properties upon instantiation.
	 *
	 * Uses reflection to gain access to the protected property.
	 */
	public function test_configuration_properties_upon_instantiation() {
		$config  = [
			'script' => [
				'mainMenu'    => 'AMP Menu',
				'menuClasses' => [
					'others' => [
						'.nav-amp',
					],
				],
			],
			'extras' => [
				'media_query_width' => '800px',
				'enable_AMP'        => true,
				'enable_non_AMP'    => true,
				'foo'               => 'AMPlified',
			],
		];
		$handler = new Genesis_Menu_Handler( 'amp-foo', $config );

		$script_config = $this->get_reflective_property( 'script_config', 'Genesis_Menu_Handler' );
		self::assertSame(
			[
				'mainMenu'            => 'AMP Menu',
				'menuIconClass'       => 'dashicons-before dashicons-menu',
				'menuIconOpenedClass' => 'dashicons-before dashicons-no-alt',
				'subMenu'             => 'Submenu',
				'subMenuIconClass'    => 'dashicons-before dashicons-arrow-down-alt2',
				'menuClasses'         => [
					'others' => [ '.nav-amp' ],
				],
			],
			$script_config->getValue( $handler )
		);

		$extras_config = $this->get_reflective_property( 'extras_config', 'Genesis_Menu_Handler' );
		self::assertSame(
			[
				'media_query_width' => '800px',
				'css'               => '',
				'enable_AMP'        => true,
				'enable_non_AMP'    => true,
				'foo'               => 'AMPlified',
			],
			$extras_config->getValue( $handler )
		);

	}

	/**
	 * Test the hook(s) is(are) added when invoking `add_hooks()` method.
	 */
	public function test_should_add_hook() {
		$handler = new Genesis_Menu_Handler( 'amp-foo', [] );
		$handler->add_hooks();

		self::assertEquals( 5, has_action( 'genesis_meta', [ $handler, 'create_nonamp_or_amp_menu' ] ) );
		self::assertEquals( 10, has_filter( 'amp_content_sanitizers', [ $handler, 'add_amp_menu_combiner' ] ) );
	}

	/**
	 * Test handler creates the non-AMP menu.
	 */
	public function test_create_nonamp_menu() {
		$handler  = new Genesis_Menu_Handler( 'amp-foo', [] );
		$property = $this->get_reflective_property( 'menu', 'Genesis_Menu_Handler' );

		Functions\expect( 'genesis_is_amp' )->once()->andReturn( false );
		$handler->create_nonamp_or_amp_menu();

		$menu = $property->getValue( $handler );
		$this->assertInstanceOf( 'Genesis_Menu', $menu );
		self::assertEquals( 10, has_action( 'wp_enqueue_scripts', [ $menu, 'enqueue_scripts' ] ) );
	}

	/**
	 * Test handler creates the AMP menu.
	 */
	public function test_create_amp_menu() {
		$config   = [
			'script' => [
				'menuClasses' => [
					'others' => [ '.nav-primary' ],
				],
			],
		];
		$handler  = new Genesis_Menu_Handler( 'amp-foo', $config );
		$property = $this->get_reflective_property( 'menu', 'Genesis_Menu_Handler' );

		Functions\expect( 'genesis_is_amp' )->once()->andReturn( true );
		$handler->create_nonamp_or_amp_menu();

		$menu = $property->getValue( $handler );
		$this->assertInstanceOf( 'Genesis_AMP_Menu', $menu );
		self::assertEquals( 20, add_action( 'wp_enqueue_scripts', [ $menu, 'add_custom_css' ] ) );
		self::assertEquals( 10, has_filter( 'genesis_attr_nav-primary', [ $menu, 'add_nav_class_attribute' ] ) );
		self::assertEquals( 10, has_filter( 'genesis_do_nav', [ $menu, 'add_hamburger_button' ] ) );
		self::assertEquals( 10, has_filter( 'genesis_attr_nav-primary-toggle', [ $menu, 'add_hamburger_attributes' ] ) );
		self::assertEquals( 10, has_filter( 'walker_nav_menu_start_el', [ $menu, 'add_nav_submenu_toggle' ] ) );
		self::assertEquals( 10, has_filter( 'genesis_attr_sub-menu-toggle', [ $menu, 'add_submenu_toggle_attributes' ] ) );
	}

	/**
	 * Test adding the menu combiner to array of content sanitizers.
	 */
	public function test_add_amp_menu_combiner() {
		$sanitizers = [];

		$handler = new Genesis_Menu_Handler( 'amp-foo', [] );
		$this->assertEquals( $sanitizers, $handler->add_amp_menu_combiner( $sanitizers ) );

		Mockery::mock( 'AMP_Base_Sanitizer' );
		$config  = [
			'script' => [
				'menuClasses' => [
					'combine' => [
						'.nav-primary',
						'.nav-secondary',
					],
					'others'  => [ '.nav-social' ],
				],
			],
		];
		$handler = new Genesis_Menu_Handler( 'amp-foo', $config );
		$this->assertEquals(
			[
				'Genesis_AMP_Menu_Combiner' => [
					'combine' => $config['script']['menuClasses']['combine'],
				],
			],
			$handler->add_amp_menu_combiner( $sanitizers )
		);

	}

	/**
	 * Test pushing the single 'combine' onto the 'others' stack.
	 *
	 * Uses reflection to gain access to the protected method and property.
	 */
	public function test_push_single_combine_onto_others() {
		$config   = [
			'script' => [
				'mainMenu'            => 'AMP Menu',
				'menuIconClass'       => '',
				'menuIconOpenedClass' => '',
				'subMenu'             => '',
				'subMenuIconClass'    => '',
				'menuClasses'         => [
					'combine' => [
						'.nav-primary',
					],
					'others'  => [
						'.nav-amp',
					],
				],
			],
		];
		$handler  = new Genesis_Menu_Handler( 'amp-foo', $config );
		$method   = $this->get_reflective_method( 'push_single_combine_onto_others', 'Genesis_Menu_Handler' );
		$property = $this->get_reflective_property( 'script_config', 'Genesis_Menu_Handler' );

		// Invoke the method.
		$method->invoke( $handler );

		// Test the configuration matches what's expected.
		$expected                            = $config['script'];
		$expected['menuClasses']['others'][] = $expected['menuClasses']['combine'][0];
		$expected['menuClasses']['combine']  = [];
		self::assertSame( $expected, $property->getValue( $handler ) );
	}
}
