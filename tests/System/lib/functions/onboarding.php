<?php
/**
 * Genesis Framework.
 *
 * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package StudioPress\Genesis
 * @author  StudioPress
 * @license GPL-2.0-or-later
 * @link    https://my.studiopress.com/themes/genesis/
 */

namespace StudioPress\Genesis\Tests\System;

use Brain\Monkey\Functions;

require_once PARENT_DIR . '/lib/functions/onboarding.php';
require_once ABSPATH . '/wp-admin/includes/class-wp-upgrader-skin.php';
require_once PARENT_DIR . '/lib/classes/class-genesis-silent-upgrader-skin.php';

/**
 * Test onboarding functions.
 *
 * @group functions
 */
class Onboarding extends TestCase {

	/**
	 * Test that Genesis imports demo content provided in the onboarding config.
	 *
	 * @covers genesis_onboarding_import_content
	 */
	public function test_genesis_onboarding_import_content() {
		Functions\when( 'get_template_directory' )->justReturn( GENESIS_THEME_DIR . '/tests/fixtures/test-configs/parent' );
		Functions\when( 'get_stylesheet_directory' )->justReturn( GENESIS_THEME_DIR . '/tests/fixtures/test-configs/child' );

		$content = genesis_onboarding_content();

		genesis_onboarding_import_content( $content );

		$imported_post_ids = get_option( 'genesis_onboarding_imported_post_ids', [] );

		$this->assertNotEmpty( $imported_post_ids );

		foreach ( $imported_post_ids as $slug => $post_id ) {
			$post = get_post( $post_id );
			$this->assertInstanceOf( \WP_Post::class, $post );
			$this->assertSame( $post->post_content, $content[ $slug ]['post_content'] );
			$this->assertSame( $post->post_title, $content[ $slug ]['post_title'] );
			$this->assertSame( $post->post_status, $content[ $slug ]['post_status'] );
			$this->assertSame( $post->post_type, $content[ $slug ]['post_type'] );

			if ( 'homepage' === $slug ) {
				$this->assertSame( $post_id, get_option( 'page_on_front' ) );
			}

			if ( 'blog' === $slug ) {
				$this->assertSame( $post_id, get_option( 'page_for_posts' ) );
			}
		}
	}

	/**
	 * Test that Genesis installs plugin dependencies provided in the onboarding config.
	 *
	 * @covers genesis_onboarding_install_dependencies
	 */
	public function test_genesis_onboarding_install_dependencies_succeeded() {

		Functions\when( 'get_template_directory' )->justReturn( GENESIS_THEME_DIR . '/tests/fixtures/test-configs/parent' );
		Functions\when( 'get_stylesheet_directory' )->justReturn( GENESIS_THEME_DIR . '/tests/fixtures/test-configs/child' );

		$onboarding_plugins = genesis_onboarding_plugins();

		$installed = genesis_onboarding_install_dependencies( $onboarding_plugins, 0 );

		$this->assertNull( $installed );

		$this->assertTrue( array_key_exists( 'atomic-blocks/atomicblocks.php', get_plugins() ) );

		$this->assertTrue( is_plugin_active( 'atomic-blocks/atomicblocks.php' ) );
	}

	/**
	 * Test that Genesis properly returns a WP_Error object when
	 * an invalid plugin dependency is provide in the onboarding config.
	 *
	 * @covers genesis_onboarding_install_dependencies
	 */
	public function test_genesis_onboarding_install_dependencies_failed() {

		$onboarding_plugins = [
			[
				'name' => 'Fake Plugin',
				'slug' => 'studiopress/studiopress-fake-plugin-slug-for-genesis-test.php',
			],
		];

		$installed = genesis_onboarding_install_dependencies( $onboarding_plugins, 0 );

		$this->assertWPError( $installed );
	}
}

