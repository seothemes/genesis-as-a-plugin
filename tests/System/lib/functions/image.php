<?php
/**
 * Genesis Framework.
 *
 * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package Genesis\Tests
 * @author  StudioPress
 * @license GPL-2.0-or-later
 * @link    https://my.studiopress.com/themes/genesis/
 */

namespace StudioPress\Genesis\Tests\System;

/**
 * Test image functions.
 *
 * @group functions
 * @group image-functions
 */
class Image_Test extends TestCase {
	/**
	 * Test get standard image sizes.
	 */
	public function test_genesis_get_image_sizes_with_standard_sizes_only() {
		update_option( 'thumbnail_size_w', 1 );
		update_option( 'thumbnail_size_h', 2 );
		update_option( 'thumbnail_crop', true );
		update_option( 'medium_size_w', 3 );
		update_option( 'medium_size_h', 4 );
		update_option( 'medium_crop', false );
		update_option( 'medium_large_size_w', 5 );
		update_option( 'medium_large_size_h', 6 );
		update_option( 'medium_large_crop', false );
		update_option( 'large_size_w', 7 );
		update_option( 'large_size_h', 8 );
		update_option( 'large_crop', false );

		$sizes = genesis_get_image_sizes();

		$this->assertCount( 4, $sizes );
		$this->assertEquals( 1, $sizes['thumbnail']['width'] );
		$this->assertEquals( 2, $sizes['thumbnail']['height'] );
		$this->assertEquals( 3, $sizes['medium']['width'] );
		$this->assertEquals( 4, $sizes['medium']['height'] );
		$this->assertEquals( 5, $sizes['medium_large']['width'] );
		$this->assertEquals( 6, $sizes['medium_large']['height'] );
		$this->assertEquals( 7, $sizes['large']['width'] );
		$this->assertEquals( 8, $sizes['large']['height'] );
		$this->assertTrue( $sizes['thumbnail']['crop'] );
		$this->assertFalse( $sizes['medium']['crop'] );
		$this->assertFalse( $sizes['medium_large']['crop'] );
		$this->assertFalse( $sizes['large']['crop'] );
	}

	/**
	 * Test get additional image sizes.
	 *
	 * The baz test checks how we handle non-integer width and height, and a crop array (i.e. not cast to boolean).
	 */
	public function test_genesis_get_image_sizes_with_additional_sizes() {
		add_image_size( 'foo', 5, 99, true );
		add_image_size( 'bar' ); // Default values are 0, 0, false.
		add_image_size( 'baz', 'Not an int', 37.6, [ 'right', 'bottom' ] );

		$sizes = genesis_get_image_sizes();

		$this->assertCount( 7, $sizes ); // There are 4 standard sizes + 3 added in this test.
		$this->assertEquals( 5, $sizes['foo']['width'] );
		$this->assertEquals( 99, $sizes['foo']['height'] );
		$this->assertTrue( $sizes['foo']['crop'] );
		$this->assertEquals( 0, $sizes['bar']['width'] );
		$this->assertEquals( 0, $sizes['bar']['height'] );
		$this->assertFalse( $sizes['bar']['crop'] );
		$this->assertEquals( 0, $sizes['bar']['width'] );
		$this->assertEquals( 0, $sizes['bar']['height'] );
		$this->assertFalse( $sizes['bar']['crop'] );
		$this->assertEquals( 0, $sizes['baz']['width'] );
		$this->assertEquals( 37, $sizes['baz']['height'] );
		$this->assertEquals( [ 'right', 'bottom' ], $sizes['baz']['crop'] );
	}
}
