<?php
/**
 * Genesis Framework.
 *
 * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package StudioPress\Genesis\Tests\System
 * @author  XWP, Google, StudioPress, and contributors
 * @license GPL-2.0-or-later
 * @link    https://github.com/studiopress/genesis-amp
 */

namespace StudioPress\Genesis\Tests\System;

require_once GENESIS_THEME_DIR . '/tests/fixtures/class-menu-factory.php';

use Brain\Monkey\Functions;
use Genesis_AMP_Menu;
use Genesis_Menu_Handler;
use \StudioPress\Genesis\Tests\Fixtures\Menu_Factory;
use WP_Styles;

/**
 * Test Genesis Responsive Menu Handler.
 *
 * @group amp
 */
class Genesis_AMP_Menu_Test extends TestCase {

	/**
	 * Holds wp_styles global.
	 *
	 * @var WP_Style
	 */
	protected $old_wp_styles;

	/**
	 * Menu configuration.
	 *
	 * @var array
	 */
	protected $config;

	/**
	 * Prepares the test environment before each test.
	 */
	public function setUp() {
		parent::setUp();

		require_once GENESIS_THEME_DIR . '/lib/classes/class-genesis-amp-menu.php';
		require_once GENESIS_THEME_DIR . '/lib/css/load-styles.php';

		$this->old_wp_styles = isset( $GLOBALS['wp_styles'] ) ? $GLOBALS['wp_styles'] : null;
		remove_action( 'wp_default_styles', 'wp_default_styles' );
		$GLOBALS['wp_styles']                  = new WP_Styles(); // phpcs:ignore WordPress.WP.GlobalVariablesOverride.Prohibited
		$GLOBALS['wp_styles']->default_version = get_bloginfo( 'version' );

		Functions\when( 'is_amp_endpoint' )->justReturn( true );
	}

	/**
	 * Cleans up the test environment after each test.
	 */
	public function tearDown() {
		$GLOBALS['wp_styles'] = $this->old_wp_styles; // phpcs:ignore WordPress.WP.GlobalVariablesOverride.Prohibited
		add_action( 'wp_default_styles', 'wp_default_styles' );
		parent::tearDown();
	}

	/**
	 * Create an instance of the menu.
	 *
	 * @param string $theme_name    Name of the active theme.
	 * @param array  $script_config Array of script configurations parameters.
	 * @param array  $extras_config Array of extra configuration parameters.
	 *
	 * @return Genesis_AMP_Menu
	 */
	private function create_instance( $theme_name, $script_config = [], $extras_config = [] ) {
		$config = [
			'script' => $script_config,
			'extras' => $extras_config,
		];
		$config = Genesis_Menu_Handler::init_config( $config );

		return new Genesis_AMP_Menu( $theme_name, $config['script'], $config['extras'] );
	}

	/**
	 * Test handler hooks the right events when AMP.
	 */
	public function test_hooks_when_amp() {
		$script_config = [
			'menuClasses' => [
				'combine' => [ '.nav-primary', '.nav-off-screen' ],
				'others'  => [ '.nav-secondary' ],
			],
		];
		$menu          = $this->create_instance( 'amp-foo', $script_config );
		$menu->add_hooks();

		self::assertEquals( 20, has_action( 'wp_enqueue_scripts', [ $menu, 'add_custom_css' ] ) );
		self::assertEquals( 10, has_filter( 'genesis_attr_nav-primary', [ $menu, 'add_nav_class_attribute' ] ) );
		self::assertEquals( 10, has_filter( 'genesis_attr_nav-secondary', [ $menu, 'add_nav_class_attribute' ] ) );
		self::assertEquals( 10, has_filter( 'genesis_do_nav', [ $menu, 'add_hamburger_button' ] ) );
		self::assertEquals( 10, has_filter( 'genesis_attr_nav-primary-toggle', [ $menu, 'add_hamburger_attributes' ] ) );
		self::assertEquals( 10, has_action( 'genesis_after', [ $menu, 'output_submenu_amp_states' ] ) );
	}

	/**
	 * Test adding the menu's CSS with the defaults.
	 */
	public function test_add_custom_css_with_defaults() {
		wp_enqueue_style( genesis_get_theme_handle(), 'http://example.com', [], 1 );

		$menu = $this->create_instance( 'amp-foo', [], [] );
		$menu->add_custom_css();

		$inline_styles = get_echo( 'wp_print_styles' );
		$css           = <<<CSS
			/* Genesis+AMP responsive menu styles.
			--------------------------------------------- */
			@media only screen and (min-width: 1023px) {
				.menu-item.genesis-amp-combined { display: none }
			}

			@media only screen and (max-width: 1023px) {
CSS;
		$this->assertContains( $css, $inline_styles );
	}

	/**
	 * Test adding the menu's CSS with custom width and CSS.
	 */
	public function test_add_custom_css_with_custom_width_and_css() {
		wp_enqueue_style( genesis_get_theme_handle(), 'http://example.com', [], 1 );

		$extras = [
			'media_query_width' => '800px',
			'css'               => 'nav.genesis-responsive-menu.toggled-on { display: block; }',
		];
		$menu   = $this->create_instance( 'amp-css', [], $extras );
		$menu->add_custom_css();

		$inline_styles = get_echo( 'wp_print_styles' );
		$this->assertContains( $extras['css'], $inline_styles );
		$css = <<<CSS
			/* Genesis+AMP responsive menu styles.
			--------------------------------------------- */
			@media only screen and (min-width: 800px) {
				.menu-item.genesis-amp-combined { display: none }
			}

			@media only screen and (max-width: 800px) {
CSS;
		$this->assertContains( $css, $inline_styles );
	}

	/**
	 * Test class attribute is added.
	 */
	public function test_add_nav_class_attribute() {
		self::assertTrue( Menu_Factory::create_off_screen_nav() );
		self::assertTrue( Menu_Factory::create_primary_nav() );
		self::assertTrue( Menu_Factory::create_secondary_nav() );

		$script_config = [
			'menuClasses' => [
				'combine' => [ '.nav-primary', '.nav-off-screen' ],
				'others'  => [ '.nav-secondary' ],
			],
		];
		$menu          = $this->create_instance( 'nav-attributes', $script_config );
		$menu->add_hooks();

		$actual = genesis_get_nav_menu(
			[
				'theme_location' => 'primary',
				'menu_class'     => 'menu genesis-nav-menu menu-primary',
			]
		);
		self::assertContains( '<nav class="nav-primary genesis-responsive-menu"', $actual );
	}

	/**
	 * Test adding the hamburger button to the menu.
	 */
	public function test_add_hamburger_button() {
		self::assertTrue( Menu_Factory::create_secondary_nav() );

		$config = [
			'mainMenu'    => 'AMP Foo Menu',
			'menuClasses' => [
				'combine' => [],
				'others'  => [ '.nav-secondary' ],
			],
		];
		$menu   = $this->create_instance( 'hamburger-test', $config );

		// Add the callback to test the method.
		add_filter( 'genesis_do_subnav', [ $menu, 'add_hamburger_button' ] );

		$actual   = genesis_get_nav_menu(
			[
				'theme_location' => 'secondary',
				'menu_class'     => 'menu genesis-nav-menu menu-secondary',
			]
		);
		$expected = '<button class="nav-secondary-toggle">AMP Foo Menu</button><nav class="nav-secondary"';
		self::assertContains( $expected, $actual );
	}

	/**
	 * Test adding the hamburger attributes to the menu.
	 */
	public function test_add_hamburger_attributes() {
		self::assertTrue( Menu_Factory::create_secondary_nav() );

		$config = [
			'mainMenu'    => 'Attributes Menu',
			'menuClasses' => [
				'combine' => [],
				'others'  => [ '.nav-secondary' ],
			],
		];
		$menu   = $this->create_instance( 'hamburger-atts', $config );

		// Add the callback to test the method.
		add_filter( 'genesis_do_subnav', [ $menu, 'add_hamburger_button' ] );
		add_filter( 'genesis_attr_nav-secondary-toggle', [ $menu, 'add_hamburger_attributes' ] );

		$actual   = genesis_get_nav_menu(
			[
				'theme_location' => 'secondary',
				'menu_class'     => 'menu genesis-nav-menu menu-secondary',
			]
		);
		$actual   = str_replace( '&#039;', "'", $this->format_the_html( $actual ) );
		$expected = <<<HTML
<amp-state id="navSecondaryExpanded">
	<script type="application/json">false</script>
</amp-state>
<button class="menu-toggle dashicons-before dashicons-menu" id="genesis-mobile-nav-secondary" aria-controls="secondary-menu" aria-expanded="false" aria-pressed="false" on="tap:AMP.setState( { navSecondaryExpanded: !navSecondaryExpanded, navSecondarySubmenuExpanded0Depth: !navSecondaryExpanded ? navSecondarySubmenuExpanded0Depth : 0 } )" [class]="navSecondaryExpanded ? 'menu-toggle dashicons-before dashicons-no-alt' : 'menu-toggle dashicons-before dashicons-menu'" [aria-expanded]="navSecondaryExpanded ? 'true' : 'false'" [aria-pressed]="navSecondaryExpanded ? 'true' : 'false'">
	Attributes Menu
</button>
HTML;

		self::assertContains( $this->format_the_html( $expected ), $actual );
	}

	/**
	 * Test adding the submenu toggles.
	 *
	 * @covers Genesis_AMP_Menu::add_nav_submenu_toggle()
	 * @covers Genesis_AMP_Menu::add_submenu_toggle_attributes()
	 */
	public function test_add_nav_submenu_toggle() {
		self::assertTrue( Menu_Factory::create_off_screen_nav() );
		self::assertTrue( Menu_Factory::create_primary_nav() );
		self::assertTrue( Menu_Factory::create_secondary_nav() );

		$config = [
			'menuClasses' => [
				'combine' => [ '.nav-primary', '.nav-secondary' ],
			],
		];
		$menu   = $this->create_instance( 'submenu-toggles', $config );
		$menu->add_hooks();

		// Test the primary menu's submenu.
		$actual   = genesis_get_nav_menu(
			[
				'theme_location' => 'primary',
				'menu_class'     => 'menu genesis-nav-menu menu-primary',
			]
		);
		$actual   = str_replace( '&#039;', "'", $this->format_the_html( $actual ) );
		$expected = <<<HTML
<a href="#" itemprop="url"><span itemprop="name">Primary 2</span></a>
<button class="sub-menu-toggle dashicons-before dashicons-arrow-down-alt2" aria-expanded="false" aria-pressed="false" on="tap:AMP.setState( { navPrimarySubmenuExpanded0Depth: navPrimarySubmenuExpanded0Depth == 1 ? 0 : 1 } )" [class]="navPrimarySubmenuExpanded0Depth == 1 ? 'sub-menu-toggle dashicons-before dashicons-arrow-down-alt2 activated toggled-on' : 'sub-menu-toggle dashicons-before dashicons-arrow-down-alt2'" [aria-expanded]="navPrimarySubmenuExpanded0Depth == 1 ? 'true' : 'false'" [aria-pressed]="navPrimarySubmenuExpanded0Depth == 1 ? 'true' : 'false'">
	<span class="screen-reader-text">Submenu</span>
</button>
<ul class="sub-menu">
HTML;
		self::assertContains( $this->format_the_html( $expected ), $actual );

		// Test the secondary menu's submenus.
		$actual            = genesis_get_nav_menu(
			[
				'theme_location' => 'secondary',
				'menu_class'     => 'menu genesis-nav-menu menu-secondary',
			]
		);
		$actual            = str_replace( '&#039;', "'", $this->format_the_html( $actual ) );
		$submenu1_expected = <<<HTML
<a href="#" itemprop="url"><span itemprop="name">Secondary 1</span></a>
<button class="sub-menu-toggle dashicons-before dashicons-arrow-down-alt2" aria-expanded="false" aria-pressed="false" on="tap:AMP.setState( { navPrimarySubmenuExpanded0Depth: navPrimarySubmenuExpanded0Depth == 2 ? 0 : 2 } )" [class]="navPrimarySubmenuExpanded0Depth == 2 ? 'sub-menu-toggle dashicons-before dashicons-arrow-down-alt2 activated toggled-on' : 'sub-menu-toggle dashicons-before dashicons-arrow-down-alt2'" [aria-expanded]="navPrimarySubmenuExpanded0Depth == 2 ? 'true' : 'false'" [aria-pressed]="navPrimarySubmenuExpanded0Depth == 2 ? 'true' : 'false'">
	<span class="screen-reader-text">Submenu</span>
</button>
<ul class="sub-menu">
HTML;
		$submenu2_expected = <<<HTML
<a href="#" itemprop="url"><span itemprop="name">Secondary 2</span></a>
<button class="sub-menu-toggle dashicons-before dashicons-arrow-down-alt2" aria-expanded="false" aria-pressed="false" on="tap:AMP.setState( { navPrimarySubmenuExpanded0Depth: navPrimarySubmenuExpanded0Depth == 3 ? 0 : 3 } )" [class]="navPrimarySubmenuExpanded0Depth == 3 ? 'sub-menu-toggle dashicons-before dashicons-arrow-down-alt2 activated toggled-on' : 'sub-menu-toggle dashicons-before dashicons-arrow-down-alt2'" [aria-expanded]="navPrimarySubmenuExpanded0Depth == 3 ? 'true' : 'false'" [aria-pressed]="navPrimarySubmenuExpanded0Depth == 3 ? 'true' : 'false'">
	<span class="screen-reader-text">Submenu</span>
</button>
<ul class="sub-menu">
HTML;

		self::assertContains( $this->format_the_html( $submenu1_expected ), $actual );
		self::assertContains( $this->format_the_html( $submenu2_expected ), $actual );

	}

	/**
	 * Test full integration.
	 */
	public function test_full_integration() {
		self::assertTrue( Menu_Factory::create_off_screen_nav() );
		self::assertTrue( Menu_Factory::create_primary_nav() );
		self::assertTrue( Menu_Factory::create_secondary_nav() );

		$script_config = [
			'mainMenu'    => 'Full Menu',
			'menuClasses' => [
				'combine' => [ '.nav-primary', '.nav-off-screen' ],
				'others'  => [ '.nav-secondary' ],
			],
		];
		$menu          = $this->create_instance( 'amp-full', $script_config );
		$menu->add_hooks();

		$actual   = genesis_get_nav_menu(
			[
				'theme_location' => 'primary',
				'menu_class'     => 'menu genesis-nav-menu menu-primary',
			]
		);
		$actual   = str_replace( '&#039;', "'", $this->format_the_html( $actual ) );
		$expected = <<<HTML
<amp-state id="navPrimaryExpanded">
	<script type="application/json">false</script>
</amp-state>
<button class="menu-toggle dashicons-before dashicons-menu" id="genesis-mobile-nav-primary" aria-controls="primary-menu" aria-expanded="false" aria-pressed="false" on="tap:AMP.setState( { navPrimaryExpanded: !navPrimaryExpanded, navPrimarySubmenuExpanded0Depth: !navPrimaryExpanded ? navPrimarySubmenuExpanded0Depth : 0 } )" [class]="navPrimaryExpanded ? 'menu-toggle dashicons-before dashicons-no-alt' : 'menu-toggle dashicons-before dashicons-menu'" [aria-expanded]="navPrimaryExpanded ? 'true' : 'false'" [aria-pressed]="navPrimaryExpanded ? 'true' : 'false'">
	Full Menu
</button>
<nav class="nav-primary genesis-responsive-menu" aria-label="Main" itemscope itemtype="https://schema.org/SiteNavigationElement" [class]="'nav-primary genesis-responsive-menu' + ( navPrimaryExpanded ? ' toggled-on' : '' )">
HTML;

		self::assertContains( $this->format_the_html( $expected ), $actual );
	}
}
