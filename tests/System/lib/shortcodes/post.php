<?php
/**
 * Genesis Framework.
 *
 * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package Genesis\Tests
 * @author  StudioPress
 * @license GPL-2.0-or-later
 * @link    https://my.studiopress.com/themes/genesis/
 */

namespace StudioPress\Genesis\Tests\System;

/**
 * Test shortcodes.
 *
 * @group shortcodes
 */
class Post_Test extends TestCase {
	const TEST_LABEL = 'TEST_LABEL_123';

	/**
	 * Adds a label to an attribute array.
	 *
	 * @param array $atts An array of attributes.
	 * @return array Array of attributes.
	 */
	public function add_test_label( $atts ) {
		$atts['label'] = self::TEST_LABEL;
		return $atts;
	}

	/**
	 * Adds a 'before' attribute to an attribute array.
	 *
	 * @param array $atts An array of attributes.
	 * @return array Array of attributes.
	 */
	public function add_test_before( $atts ) {
		$atts['before'] = self::TEST_LABEL;
		return $atts;
	}

	/**
	 * Tests the `post_date` and `post_time` shortcodes' attribute filtering.
	 *
	 * @covers genesis_post_date_shortcode
	 * @covers genesis_post_time_shortcode
	 */
	public function test_post_date_time_shortcode_attribute_filtering() {
		$this->assertTrue( function_exists( 'genesis_post_date_shortcode' ) );
		add_filter( 'shortcode_atts_post_date', [ $this, 'add_test_label' ] );
		$out = genesis_post_date_shortcode(
			[
				'after'  => '',
				'before' => '',
				'format' => get_option( 'date_format' ),
				'label'  => '',
			]
		);
		$this->assertContains( self::TEST_LABEL, $out );
		remove_filter( 'shortcode_atts_post_date', [ $this, 'add_test_label' ] );
	}

	/**
	 * Tests `post_date` and `post_time` shortcodes' HTML classes.
	 *
	 * @covers genesis_post_date_shortcode
	 * @covers genesis_post_time_shortcode
	 */
	public function test_post_date_time_shortcode_classes() {
		$this->html(
			function() {
				$html5 = genesis_post_date_shortcode( [] );
				$this->assertContainsClass( 'entry-time', $html5 );
				$html5 = genesis_post_time_shortcode( [] );
				$this->assertContainsClass( 'entry-time', $html5 );
			}
		);
	}

	/**
	 * Tests the `post_comments` shortcode attribute filtering.
	 *
	 * @covers genesis_post_comments_shortcode
	 */
	public function test_post_comments_shortcode_attribute_filtering() {
		// Create a post.
		$post_id = $this->factory->post->create(
			[
				'post_status' => 'publish',
			]
		);
		$query   = new \WP_Query();
		$query->query(
			[
				'p' => $post_id,
			]
		);
		// And make it the current one in the loop.
		$query->the_post();

		$this->assertTrue( function_exists( 'genesis_post_comments_shortcode' ) );
		add_filter( 'shortcode_atts_post_comments', [ $this, 'add_test_before' ] );
		$out = genesis_post_comments_shortcode(
			[
				'before'      => 'should not pass through',
				'hide_if_off' => 'disabled',
			]
		);
		$this->assertContains( self::TEST_LABEL, $out );
		remove_filter( 'shortcode_atts_post_comments', [ $this, 'add_test_before' ] );
	}

	/**
	 * Tests `post_comments` shortcode HTML classes.
	 *
	 * @covers genesis_post_comments_shortcode
	 */
	public function test_post_comments_shortcode_classes() {
		// Create a post.
		$post_id = $this->factory->post->create(
			[
				'post_status' => 'publish',
			]
		);
		// Query that post.
		$query = new \WP_Query();
		$query->query(
			[
				'p' => $post_id,
			]
		);
		// And make it the current one in the loop.
		$query->the_post();

		$this->html(
			function() {
				$html5 = genesis_post_comments_shortcode(
					[
						'hide_if_off' => 'disabled',
					]
				);
				$this->assertContainsClass( 'entry-comments-link', $html5 );
			}
		);
	}

	/**
	 * Tests the `post_tags` shortcode attribute filtering.
	 *
	 * @covers genesis_post_tags_shortcode
	 */
	public function test_post_tags_shortcode_attribute_filtering() {
		// Create a post.
		$post_id = $this->factory->post->create(
			[
				'post_status' => 'publish',
			]
		);
		// Set tags on it.
		wp_set_post_tags( $post_id, [ 'tag1', 'tag2' ] );
		$query = new \WP_Query();
		$query->query(
			[
				'p' => $post_id,
			]
		);
		// And make it the current one in the loop.
		$query->the_post();

		$this->assertTrue( function_exists( 'genesis_post_tags_shortcode' ) );
		add_filter( 'shortcode_atts_post_tags', [ $this, 'add_test_before' ] );
		$out = genesis_post_tags_shortcode(
			[
				'before'      => 'should not pass through',
				'hide_if_off' => 'disabled',
			]
		);
		$this->assertContains( self::TEST_LABEL, $out );
		remove_filter( 'shortcode_atts_post_tags', [ $this, 'add_test_before' ] );
	}

	/**
	 * Tests `post_tags` shortcode HTML classes.
	 *
	 * @covers genesis_post_tags_shortcode
	 */
	public function test_post_tags_shortcode_classes() {
		// Create a post.
		$post_id = $this->factory->post->create(
			[
				'post_status' => 'publish',
			]
		);
		// Set tags on it.
		wp_set_post_tags( $post_id, [ 'tag1', 'tag2' ] );
		$query = new \WP_Query();
		$query->query(
			[
				'p' => $post_id,
			]
		);
		// And make it the current one in the loop.
		$query->the_post();

		$this->html(
			function() {
				$html5 = genesis_post_tags_shortcode( [] );
				$this->assertContainsClass( 'entry-tags', $html5 );
			}
		);
	}

	/**
	 * Tests the `post_categories` shortcode attribute filtering.
	 *
	 * @covers genesis_post_categories_shortcode
	 */
	public function test_post_categories_shortcode_attribute_filtering() {
		// Create a post.
		$post_id = $this->factory->post->create(
			[
				'post_status' => 'publish',
			]
		);
		// Create a category.
		$category_id = wp_create_category( 'test' );
		// Set category on post.
		wp_set_post_categories( $post_id, [ $category_id ] );
		$query = new \WP_Query();
		$query->query(
			[
				'p' => $post_id,
			]
		);
		// And make it the current one in the loop.
		$query->the_post();

		$this->assertTrue( function_exists( 'genesis_post_categories_shortcode' ) );
		add_filter( 'shortcode_atts_post_categories', [ $this, 'add_test_before' ] );
		$out = genesis_post_categories_shortcode(
			[
				'before'      => 'should not pass through',
				'hide_if_off' => 'disabled',
			]
		);
		$this->assertContains( self::TEST_LABEL, $out );
		remove_filter( 'shortcode_atts_post_categories', [ $this, 'add_test_before' ] );
	}

	/**
	 * Tests `post_categories` and `post_terms` shortcodes' HTML classes.
	 *
	 * @covers genesis_post_categories_shortcode
	 * @covers genesis_post_terms_shortcode
	 */
	public function test_post_categories_shortcode_classes() {
		// Create a post.
		$post_id = $this->factory->post->create(
			[
				'post_status' => 'publish',
			]
		);
		// Create a category.
		$category_id = wp_create_category( 'test' );
		// Set category on post.
		wp_set_post_categories( $post_id, [ $category_id ] );
		$query = new \WP_Query();
		$query->query(
			[
				'p' => $post_id,
			]
		);
		// And make it the current one in the loop.
		$query->the_post();

		$this->html(
			function() {
				$html5 = genesis_post_categories_shortcode( [] );
				$this->assertContainsClass( 'entry-categories', $html5 );
				$html5 = genesis_post_terms_shortcode( [] );
				$this->assertContainsClass( 'entry-terms', $html5 );
			}
		);
	}
}
