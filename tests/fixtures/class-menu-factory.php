<?php
/**
 * Genesis Framework.
 *
 * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package StudioPress\Genesis_AMP\Tests
 * @author  XWP, Google, StudioPress, and contributors
 * @license GPL-2.0-or-later
 * @link    https://github.com/studiopress/genesis-amp
 */

namespace StudioPress\Genesis\Tests\Fixtures;

/**
 * Menu Factory for creating menus.  Comes packaged with 3 standard menus:
 *
 * 1. Off Screen menu with no submenus
 * 2. Primary menu with one submenu
 * 3. Secondary menu with two submenus.
 *
 * @package StudioPress\Genesis_AMP\Tests
 */
class Menu_Factory {

	/**
	 * Creates the "off-screen" menu.
	 *
	 * @since 3.0.0
	 *
	 * @return bool returns the value of has_nav_menu.
	 */
	public static function create_off_screen_nav() {
		$menus = [
			[
				[
					'menu-item-title'  => 'Offscreen 1',
					'menu-item-url'    => '#',
					'menu-item-status' => 'publish',
					'menu-item-type'   => 'custom',
				],
			],
			[
				[
					'menu-item-title'  => 'Offscreen 2',
					'menu-item-url'    => '#',
					'menu-item-status' => 'publish',
					'menu-item-type'   => 'custom',
				],
			],
		];

		return self::add_menu( 'Off Screen', 'off-screen', $menus );
	}

	/**
	 * Creates the "primary" menu.
	 *
	 * @since 3.0.0
	 *
	 * @return bool returns the value of has_nav_menu.
	 */
	public static function create_primary_nav() {
		$menus = [
			[
				[
					'menu-item-title'  => 'Primary 1',
					'menu-item-url'    => '#',
					'menu-item-status' => 'publish',
					'menu-item-type'   => 'custom',
				],
			],
			[
				[
					'menu-item-title'  => 'Primary 2',
					'menu-item-url'    => '#',
					'menu-item-status' => 'publish',
					'menu-item-type'   => 'custom',
				],
				[
					'menu-item-title'     => 'Primary 2 Sub 1',
					'menu-item-url'       => '#',
					'menu-item-status'    => 'publish',
					'menu-item-type'      => 'custom',
					'menu-item-parent-id' => 0,
				],
				[
					'menu-item-title'     => 'Primary 2 Sub 2',
					'menu-item-url'       => '#',
					'menu-item-status'    => 'publish',
					'menu-item-type'      => 'custom',
					'menu-item-parent-id' => 0,
				],
			],
		];

		return self::add_menu( 'Primary', 'primary', $menus );
	}

	/**
	 * Creates the "secondary" menu.
	 *
	 * @since 3.0.0
	 *
	 * @return bool returns the value of has_nav_menu.
	 */
	public static function create_secondary_nav() {
		$menus = [
			[
				[
					'menu-item-title'  => 'Secondary 1',
					'menu-item-url'    => '#',
					'menu-item-status' => 'publish',
					'menu-item-type'   => 'custom',
				],
				[
					'menu-item-title'     => 'Secondary 1 Sub 1',
					'menu-item-url'       => '#',
					'menu-item-status'    => 'publish',
					'menu-item-type'      => 'custom',
					'menu-item-parent-id' => 0,
				],
			],
			[
				[
					'menu-item-title'  => 'Secondary 2',
					'menu-item-url'    => '#',
					'menu-item-status' => 'publish',
					'menu-item-type'   => 'custom',
				],
				[
					'menu-item-title'     => 'Secondary 2 Sub 1',
					'menu-item-url'       => '#',
					'menu-item-status'    => 'publish',
					'menu-item-type'      => 'custom',
					'menu-item-parent-id' => 0,
				],
			],
		];

		return self::add_menu( 'Secondary', 'secondary', $menus );
	}

	/**
	 * Adds the menu by registering it, creating the menu, and then applying it to the given theme location.
	 *
	 * @since 3.0.0
	 *
	 * @param string $name           Menu name.
	 * @param string $theme_location Nav menu's theme location.
	 * @param array  $menus          Menu configuration parameters.
	 *
	 * @return bool returns the value of has_nav_menu.
	 */
	public static function add_menu( $name, $theme_location, $menus ) {
		register_nav_menu( $theme_location, $name );

		$menu_id = wp_create_nav_menu( $name );

		foreach ( $menus as $menu_config ) {
			// Create the 1st level menu.
			$config    = array_shift( $menu_config );
			$parent_id = wp_update_nav_menu_item( $menu_id, 0, $config );

			// Create the submenus, if there are any.
			foreach ( $menu_config as $menu ) {
				$menu['menu-item-parent-id'] = $parent_id;
				wp_update_nav_menu_item( $menu_id, 0, $menu );
			}
		}

		// Assign the menu to the theme location.
		$locations                    = get_nav_menu_locations();
		$menu_obj                     = wp_get_nav_menu_object( $menu_id );
		$locations[ $theme_location ] = $menu_obj->term_id;
		set_theme_mod( 'nav_menu_locations', $locations );

		return has_nav_menu( $theme_location );
	}
}
